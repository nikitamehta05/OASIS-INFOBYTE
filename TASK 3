TASK 3.ATM INTERFACE

import java.util.*;

class Transaction {
    String type;
    double amount;
    String recipient;
    Date date;

    Transaction(String type, double amount, String recipient) {
        this.type = type;
        this.amount = amount;
        this.recipient = recipient;
        this.date = new Date();
    }

    public String toString() {
        if (recipient == null)
            return type + " of $" + amount + " on " + date;
        else
            return type + " of $" + amount + " to " + recipient + " on " + date;
    }
}

class TransactionHistory {
    private List<Transaction> transactions = new ArrayList<>();

    public void addTransaction(String type, double amount, String recipient) {
        transactions.add(new Transaction(type, amount, recipient));
    }

    public void showHistory() {
        if (transactions.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            for (Transaction t : transactions) {
                System.out.println(t);
            }
        }
    }
}

class User {
    String userId;
    String userPin;
    double balance;
    TransactionHistory history;

    User(String userId, String userPin) {
        this.userId = userId;
        this.userPin = userPin;
        this.balance = 1000.0; // default balance
        this.history = new TransactionHistory();
    }

    public boolean validatePin(String pin) {
        return this.userPin.equals(pin);
    }
}

class Bank {
    private Map<String, User> users = new HashMap<>();

    public Bank() {
        // Add a default user
        addUser(new User("12345", "6789"));
    }

    public void addUser(User user) {
        users.put(user.userId, user);
    }

    public User getUser(String userId) {
        return users.get(userId);
    }

    public boolean userExists(String userId) {
        return users.containsKey(userId);
    }

    public void transfer(User sender, String recipientId, double amount) {
        if (!userExists(recipientId)) {
            System.out.println("Recipient account not found.");
            return;
        }

        if (sender.balance < amount) {
            System.out.println("Insufficient balance.");
            return;
        }

        User recipient = getUser(recipientId);
        sender.balance -= amount;
        recipient.balance += amount;

        sender.history.addTransaction("Transfer", amount, recipientId);
        recipient.history.addTransaction("Received", amount, sender.userId);

        System.out.println("Transfer successful!");
    }
}

public class ATM {
    static Scanner sc = new Scanner(System.in);
    static Bank bank = new Bank();

    public static void main(String[] args) {
        System.out.println("Welcome to the ATM!");
        System.out.print("Enter User ID: ");
        String userId = sc.nextLine();
        System.out.print("Enter PIN: ");
        String pin = sc.nextLine();

        User user = bank.getUser(userId);
        if (user != null && user.validatePin(pin)) {
            System.out.println("Login successful!\n");
            showMenu(user);
        } else {
            System.out.println("Invalid ID or PIN. Access denied.");
        }
    }

    public static void showMenu(User user) {
        int choice;
        do {
            System.out.println("\n===== ATM Menu =====");
            System.out.println("1. Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Choose an option: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    user.history.showHistory();
                    break;
                case 2:
                    withdraw(user);
                    break;
                case 3:
                    deposit(user);
                    break;
                case 4:
                    transfer(user);
                    break;
                case 5:
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid option.");
            }
        } while (choice != 5);
    }

    public static void withdraw(User user) {
        System.out.print("Enter amount to withdraw: $");
        double amount = sc.nextDouble();
        if (amount <= 0) {
            System.out.println("Invalid amount.");
        } else if (amount > user.balance) {
            System.out.println("Insufficient balance.");
        } else {
            user.balance -= amount;
            user.history.addTransaction("Withdraw", amount, null);
            System.out.println("Withdraw successful. New balance: $" + user.balance);
        }
    }

    public static void deposit(User user) {
        System.out.print("Enter amount to deposit: $");
        double amount = sc.nextDouble();
        if (amount <= 0) {
            System.out.println("Invalid amount.");
        } else {
            user.balance += amount;
            user.history.addTransaction("Deposit", amount, null);
            System.out.println("Deposit successful. New balance: $" + user.balance);
        }
    }

    public static void transfer(User user) {
        System.out.print("Enter recipient User ID: ");
        String recipientId = sc.next();
        System.out.print("Enter amount to transfer: $");
        double amount = sc.nextDouble();
        bank.transfer(user, recipientId, amount);
    }
}
